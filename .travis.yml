language: cpp

env:
  global:
    # Global build options and C++ flags
    - CXX_FLAGS="-Wall -pedantic -Werror -Wno-variadic-macros -Wno-long-long -Wno-shadow"
    # Misc
    - RUN_TESTS=true
    - COVERAGE=false

matrix:
  include:
    - os: linux
      dist: trusty
      sudo: true
      compiler: gcc
      env:
        - NAME="Code Coverage"
        - LINUX_DIST=trusty
        - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
        - COVERAGE=true
      addons:
       apt:
         packages: &precise_latest_boost_packages
           - gcc-4.8
           - g++-4.8
           #- gcov-4.9
           - valgrind
           # Misc
           - python-yaml
           - lcov
           - libopencv-dev
         sources: &precise_latest_boost_sources
           - ubuntu-toolchain-r-test
           - llvm-toolchain-precise-3.7
    - os: linux
      dist: trusty
      sudo: true
      compiler: clang
      env:
        - NAME="Clang Optimised"
        - LINUX_DIST=trusty
        - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
      addons:
       apt:
         packages: &precise_latest_boost_packages
           #- gcov-4.9
           - clang-3.7
           - valgrind
           # Misc
           - python-yaml
           - lcov
           - libopencv-dev
         sources: &precise_latest_boost_sources
           - ubuntu-toolchain-r-test
           - llvm-toolchain-precise-3.7
    - os: linux
      dist: trusty
      sudo: true
      compiler: gcc
      env:
        - NAME="GCC 4.8 Optimised"
        - LINUX_DIST=trusty
        - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
      addons:
       apt:
         packages: &precise_latest_boost_packages
           - gcc-4.8
           - g++-4.8
           #- gcov-4.9
           - valgrind
           # Misc
           - python-yaml
           - lcov
           - libopencv-dev
         sources: &precise_latest_boost_sources
           - ubuntu-toolchain-r-test
    - os: linux
      dist: trusty
      sudo: true
      compiler: gcc
      env:
        - NAME="GCC 5 Optimised"
        - LINUX_DIST=trusty
        - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
      addons:
       apt:
         packages: &precise_latest_boost_packages
           - gcc-5
           - g++-5
           - valgrind
           # Misc
           - libopencv-dev
         sources: &precise_latest_boost_sources
           - ubuntu-toolchain-r-test
    - os: linux
      dist: trusty
      sudo: true
      compiler: gcc
      env:
        - NAME="GCC 6 Optimised"
        - LINUX_DIST=trusty
        - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
      addons:
       apt:
         packages: &precise_latest_boost_packages
           - gcc-6
           - g++-6
           - valgrind
           # Misc
           - libopencv-dev
         sources: &precise_latest_boost_sources
           - ubuntu-toolchain-r-test
    - os: linux
      dist: trusty
      sudo: true
      compiler: gcc
      env:
        - NAME="GCC 7 Optimised"
        - LINUX_DIST=trusty
        - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
      addons:
       apt:
         packages: &precise_latest_boost_packages
           - gcc-7
           - g++-7
           - valgrind
           # Misc
           - libopencv-dev
         sources: &precise_latest_boost_sources
           - ubuntu-toolchain-r-test
    - os: linux
      dist: trusty
      sudo: true
      compiler: gcc
      env:
        - NAME="GCC 8 Optimised"
        - LINUX_DIST=trusty
        - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
      addons:
       apt:
         packages: &precise_latest_boost_packages
           - gcc-8
           - g++-8
           - valgrind
           # Misc
           - libopencv-dev
         sources: &precise_latest_boost_sources
           - ubuntu-toolchain-r-test
    - os: osx
      osx_image: xcode9.4
      env:
        - NAME="MacOS Optimised"

install:
    # For Linux, download and install recent cmake
    - |
      if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then
        CMAKE_URL="https://cmake.org/files/v3.11/cmake-3.11.4-Linux-x86_64.tar.gz"
        mkdir -p ${DEPS_DIR}/cmake
        travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C ${DEPS_DIR}/cmake
        export PATH=${DEPS_DIR}/cmake/bin:${PATH}
      fi

    # For MacOS, download and install dependencies through homebrew
    - |
      if [ ${TRAVIS_OS_NAME} == "osx" ] && [ ${COVERAGE} == "true" ]; then
        brew update
        brew list lcov || brew install lcov
      fi

    # Install code coverage dependencies
    - if [ ${COVERAGE} == "true" ]; then sudo pip install codecov; fi

before_script:
    # Config CMake to run tests
    - |
      if [ ${RUN_TESTS} == "true" ]; then
        export ENV_CMAKE_OPTIONS=${ENV_CMAKE_OPTIONS}" -DBUILD_TESTS=ON"
      fi

    # Configure CMake to test code coverage
    - |
      if [ ${COVERAGE} == "true" ] && [ ${CXX} != clang++* ]; then
        export ENV_CMAKE_OPTIONS=${ENV_CMAKE_OPTIONS}" -DCMAKE_BUILD_TYPE=Coverage"
      fi

    # Combine global build options with OS/compiler-dependent options
    - export CMAKE_OPTIONS=${CMAKE_OPTIONS}" "${ENV_CMAKE_OPTIONS}
    - export CXX_FLAGS=${CXX_FLAGS}" "${ENV_CXX_FLAGS}

    # In Linux with clang compiler, use version 3.7
    - if [ "$CXX" = "clang++" ] && [ "$TRAVIS_OS_NAME" = "linux" ]; then export CXX="clang++-3.7" CC="clang-3.7"; fi

    - echo ${PATH}
    - echo ${CXX}
    - ${CXX} --version
    - ${CXX} -v

script:
    ############################################################################
    # Build main and tests
    ############################################################################
     - mkdir -p build
     - cd build
     - cmake ${CMAKE_OPTIONS} -DCMAKE_CXX_FLAGS=${CXX_FLAGS} ..
     - make
     - |
       if [ ${COVERAGE} == "true" ] && [ ${CXX} != clang++* ]; then
         make SudokuSolver_coverage
       elif [ ${RUN_TESTS} == "true" ]; then
         make test
       fi

after_success:
    - if [ ${COVERAGE} == "true" ]; then codecov -t b1948277-a6d0-44f4-8621-9d2c7108fe09 -X gcov; fi
